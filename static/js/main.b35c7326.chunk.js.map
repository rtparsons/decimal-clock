{"version":3,"sources":["clocks/DecimalTimeDisplay.tsx","clocks/DateDisplay.tsx","clocks/FractionalTimeDisplay.tsx","clocks/TwentyFourHourTimeDisplay.tsx","clocks/TwelveHourTimeDisplay.tsx","ClocksDisplay.tsx","SimpleMenu.tsx","Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DecimalTimeDisplay","toConvert","totalDecimalMs","getHours","getMinutes","getSeconds","getMilliseconds","decimalHours","Math","floor","decimalMinutes","decimalSeconds","this","padWithZero","toPad","toString","padStart","timeString","getDecimalTime","props","date","className","React","Component","DateDisplay","toDateString","FractionalTimeDisplay","fractional","toFixed","TwentyFourHourTimeDisplay","hours","mins","secs","TwelveHourTimeDisplay","isPm","ClocksDisplay","timerId","state","Date","setInterval","tick","clearInterval","setState","path","SimpleMenu","useState","anchorEl","setAnchorEl","handleClose","IconButton","onClick","event","currentTarget","color","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","to","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","title","flexGrow","appBarSpacer","mixins","content","height","overflow","container","paddingTop","spacing","paddingBottom","paper","padding","flexDirection","Dashboard","classes","CssBaseline","AppBar","position","clsx","Toolbar","Container","maxWidth","Grid","item","xs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUASaA,EAAb,oKAEI,SAAeC,GACX,IAAKA,EACD,MAAO,GAGX,IAMIC,GADmB,GALXD,EAAUE,WAKM,GAAK,IAAmB,GAJtCF,EAAUG,aAIiC,IAAmB,IAH9DH,EAAUI,aACLJ,EAAUK,mBAGG,MAAY,IAExCC,EAAeC,KAAKC,MAAMP,EAAiB,KAC3CQ,EAAiBF,KAAKC,MAAOP,EAAiB,IAAU,KACxDS,EAAiBH,KAAKC,MAAOP,EAAiB,IAAQ,KAI1D,MAAM,GAAN,OAAUU,KAAKC,YAAYN,GAA3B,YAA4CK,KAAKC,YAAYH,GAA7D,YAAgFE,KAAKC,YAAYF,MArBzG,yBAwBI,SAAYG,GACR,OAAOA,EAAMC,WAAWC,SAAS,EAAG,OAzB5C,oBA4BI,WACI,IAAMC,EAAaL,KAAKM,eAAeN,KAAKO,MAAMC,MAClD,OACI,sBAAMC,UAAU,QAAhB,SAA0BJ,QA/BtC,GAAwCK,IAAMC,WCH/BC,MANf,SAAqBL,GACjB,OACI,sBAAME,UAAU,OAAhB,mBAA2BF,EAAMC,KAAKK,mBCU/BC,MAZf,SAA+BP,GAC3B,IAAMC,EAAaD,EAAMC,KAKnBO,GAJ6B,GAAlBP,EAAKjB,WAAkB,GAAK,IACpB,GAApBiB,EAAKhB,aAAoB,IACL,IAApBgB,EAAKf,aACNe,EAAKd,mBACiB,MAC1B,OACI,sBAAMe,UAAU,QAAhB,mBAA4BM,EAAWC,QAAQ,OCGvD,SAASf,EAAYC,GACjB,OAAOA,EAAMC,WAAWC,SAAS,EAAG,KAGzBa,MAff,SAAmCV,GAC/B,IAAMC,EAAaD,EAAMC,KACnBU,EAAQjB,EAAYO,EAAKjB,YACzB4B,EAAOlB,EAAYO,EAAKhB,cACxB4B,EAAOnB,EAAYO,EAAKf,cAE9B,OACI,sBAAMgB,UAAU,QAAhB,mBAA4BS,EAA5B,YAAqCC,EAArC,YAA6CC,MCMrD,SAASnB,EAAYC,GACjB,OAAOA,EAAMC,WAAWC,SAAS,EAAG,KAGzBiB,MAjBf,SAA+Bd,GAC3B,IAAMC,EAAaD,EAAMC,KACrBU,EAAQV,EAAKjB,WAAa,GACxB4B,EAAOlB,EAAYO,EAAKhB,cACxB4B,EAAOnB,EAAYO,EAAKf,cACxB6B,EAAOd,EAAKjB,WAAa,GAG/B,OAFA2B,EAAkB,IAAVA,EAAc,GAAKA,EAGvB,sBAAMT,UAAU,QAAhB,mBAA4BS,EAA5B,YAAqCC,EAArC,YAA6CC,EAA7C,YAAqDE,EAAO,KAAO,S,OCOtDC,E,kDAGjB,WAAYhB,GAAgB,IAAD,8BACvB,cAAMA,IAHFiB,aAEmB,EAEvB,EAAKC,MAAQ,CACTjB,KAAM,IAAIkB,MAHS,E,qDAO3B,WAAqB,IAAD,OAChB1B,KAAKwB,QAAUG,aACX,kBAAM,EAAKC,SAEX,O,kCAIR,WACIC,cAAc7B,KAAKwB,W,kBAGvB,WACIxB,KAAK8B,SAAS,CACVtB,KAAM,IAAIkB,S,oBAIlB,WACI,OACE,sBAAKjB,UAAU,MAAf,UACI,eAAC,IAAD,WACE,cAAC,IAAD,CAAOsB,KAAK,cAAZ,SACE,cAAC,EAAD,CAAuBvB,KAAOR,KAAKyB,MAAMjB,SAE3C,cAAC,IAAD,CAAOuB,KAAK,cAAZ,SACE,cAAC,EAAD,CAA2BvB,KAAOR,KAAKyB,MAAMjB,SAE/C,cAAC,IAAD,CAAOuB,KAAK,UAAZ,SACE,cAAC,EAAD,CAAuBvB,KAAOR,KAAKyB,MAAMjB,SAE3C,cAAC,IAAD,CAAOuB,KAAM,CAAC,WAAY,KAA1B,SACE,cAAC,EAAD,CAAoBvB,KAAOR,KAAKyB,MAAMjB,YAI1C,cAAC,EAAD,CAAaA,KAAOR,KAAKyB,MAAMjB,c,GA9CFE,IAAMC,W,4CCTlC,SAASqB,IACtB,MAAgCtB,IAAMuB,SAA6B,MAAnE,mBAAOC,EAAP,KAAiBC,EAAjB,KAMMC,EAAc,WAClBD,EAAY,OAGd,OACE,gCACE,cAACE,EAAA,EAAD,CAAYC,QAVI,SAACC,GACnBJ,EAAYI,EAAMC,gBASkBC,MAAM,UAAxC,SACE,cAACC,EAAA,EAAD,MAEF,eAAC,IAAD,CACEC,GAAG,cACHT,SAAUA,EACVU,aAAW,EACXC,KAAMC,QAAQZ,GACda,QAASX,EALX,UAOE,cAACY,EAAA,EAAD,CAAUV,QAASF,EAAnB,SACE,cAAC,IAAD,CAAMa,GAAG,cAAT,uBAEF,cAACD,EAAA,EAAD,CAAUV,QAASF,EAAnB,SACE,cAAC,IAAD,CAAMa,GAAG,UAAT,uBAEF,cAACD,EAAA,EAAD,CAAUV,QAASF,EAAnB,SACE,cAAC,IAAD,CAAMa,GAAG,WAAT,uBAEF,cAACD,EAAA,EAAD,CAAUV,QAASF,EAAnB,SACE,cAAC,IAAD,CAAMa,GAAG,cAAT,gCCvBV,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,QAAS,CACPC,aAAc,IAEhBC,OAAQ,CACNC,OAAQN,EAAMM,OAAOC,OAAS,EAC9BC,WAAYR,EAAMS,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQX,EAAMS,YAAYE,OAAOC,MACjCC,SAAUb,EAAMS,YAAYI,SAASC,iBAGzCC,MAAO,CACLC,SAAU,GAEZC,aAAcjB,EAAMkB,OAAOf,QAC3BgB,QAAS,CACPH,SAAU,EACVI,OAAQ,QACRC,SAAU,QAEZC,UAAW,CACTC,WAAYvB,EAAMwB,QAAQ,GAC1BC,cAAezB,EAAMwB,QAAQ,IAE/BE,MAAO,CACLC,QAAS3B,EAAMwB,QAAQ,GACvBtB,QAAS,OACTmB,SAAU,OACVO,cAAe,cAIJ,SAASC,IACtB,IAAMC,EAAUhC,IAEhB,OACE,sBAAKzC,UAAWyE,EAAQ7B,KAAxB,UACE,cAAC8B,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,SAAS,WAAW5E,UAAW6E,YAAKJ,EAAQzB,QAApD,SACE,cAAC8B,EAAA,EAAD,CAAS9E,UAAWyE,EAAQ3B,QAA5B,SACE,cAACvB,EAAD,QAIJ,uBAAMvB,UAAWyE,EAAQX,QAAzB,UACE,qBAAK9D,UAAWyE,EAAQb,eACxB,cAACmB,EAAA,EAAD,CAAWC,SAAS,KAAKhF,UAAWyE,EAAQR,UAA5C,SACE,cAACgB,EAAA,EAAD,CAAMhB,WAAS,EAACE,QAAS,EAAzB,SACE,cAACc,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACI,cAAC,EAAD,gB,IChEKC,E,4JAEjB,WACI,OACI,cAAC,IAAD,UACI,cAACZ,EAAD,U,GALiBvE,IAAMC,WCSxBmF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b35c7326.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface IProps {\n    date?: Date;\n}\n\ninterface IState {\n}\n\nexport class DecimalTimeDisplay extends React.Component<IProps, IState> {\n\n    getDecimalTime(toConvert?: Date): string {\n        if (!toConvert) {\n            return '';\n        }\n\n        var hours = toConvert.getHours();\n        var minutes = toConvert.getMinutes();\n        var seconds = toConvert.getSeconds();\n        var milliseconds = toConvert.getMilliseconds();\n        \n        var totalMs = (hours * 60 * 60 * 1000) + (minutes * 60 * 1000) + (seconds * 1000) + milliseconds;\n        var totalDecimalMs = (totalMs / 86400000) * 100000000;\n\n        var decimalHours = Math.floor(totalDecimalMs / 10000000);\n        var decimalMinutes = Math.floor((totalDecimalMs / 100000) % 100);\n        var decimalSeconds = Math.floor((totalDecimalMs / 1000) % 100);\n\n        // 86400 seconds in normal day\n        // 100000 seconds in decimal day\n        return `${this.padWithZero(decimalHours)}:${this.padWithZero(decimalMinutes)}:${this.padWithZero(decimalSeconds)}`;\n    }\n\n    padWithZero(toPad: number): string {\n        return toPad.toString().padStart(2, '0');\n    }\n\n    render() {\n        const timeString = this.getDecimalTime(this.props.date);\n        return (\n            <span className=\"clock\">{ timeString }</span>\n        );\n    }\n}","function DateDisplay(props: any) {\n    return (\n        <span className=\"date\">{`${props.date.toDateString()}`}</span>\n    );\n}\n\nexport default DateDisplay;","function FractionalTimeDisplay(props: any) {\n    const date: Date = props.date;\n    const totalMs = (date.getHours() * 60 * 60 * 1000) + \n        (date.getMinutes() * 60 * 1000) + \n        (date.getSeconds() * 1000) +\n        date.getMilliseconds();\n    const fractional = totalMs / (24 * 60 * 60 * 1000);\n    return (\n        <span className=\"clock\">{`${fractional.toFixed(5)}`}</span>\n    );\n}\n\nexport default FractionalTimeDisplay;","function TwentyFourHourTimeDisplay(props: any) {\n    const date: Date = props.date;\n    const hours = padWithZero(date.getHours());\n    const mins = padWithZero(date.getMinutes());\n    const secs = padWithZero(date.getSeconds());\n\n    return (\n        <span className=\"clock\">{`${hours}:${mins}:${secs}`}</span>\n    );\n}\n\nfunction padWithZero(toPad: number): string {\n    return toPad.toString().padStart(2, '0');\n}\n\nexport default TwentyFourHourTimeDisplay;","function TwelveHourTimeDisplay(props: any) {\n    const date: Date = props.date;\n    let hours = date.getHours() % 12;\n    const mins = padWithZero(date.getMinutes());\n    const secs = padWithZero(date.getSeconds());\n    const isPm = date.getHours() > 11;\n    hours = hours === 0 ? 12 : hours;\n\n    return (\n        <span className=\"clock\">{`${hours}:${mins}:${secs} ${isPm ? 'PM' : 'AM'}`}</span>\n    );\n}\n\nfunction padWithZero(toPad: number): string {\n    return toPad.toString().padStart(2, '0');\n}\n\nexport default TwelveHourTimeDisplay;","import React from 'react';\nimport './App.css';\nimport { DecimalTimeDisplay } from './clocks/DecimalTimeDisplay';\nimport DateDisplay from './clocks/DateDisplay';\nimport FractionalTimeDisplay from './clocks/FractionalTimeDisplay';\nimport TwentyFourHourTimeDisplay from './clocks/TwentyFourHourTimeDisplay';\nimport TwelveHourTimeDisplay from './clocks/TwelveHourTimeDisplay';\nimport { Route, Switch } from 'react-router-dom';\n\ninterface IProps {\n}\n\ninterface IState {\n  date?: Date;\n}\n\nexport default class ClocksDisplay extends React.Component<IProps, IState> {\n    private timerId: any;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { \n            date: new Date()\n        };\n    }\n\n    componentDidMount() {\n        this.timerId = setInterval(\n            () => this.tick(),\n            //864 // length of a sec in decimal time\n            100\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerId);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    render() {\n        return (\n          <div className=\"App\">\n              <Switch>\n                <Route path=\"/fractional\">\n                  <FractionalTimeDisplay date={ this.state.date }></FractionalTimeDisplay>\n                </Route>\n                <Route path=\"/twentyfour\">\n                  <TwentyFourHourTimeDisplay date={ this.state.date }></TwentyFourHourTimeDisplay>\n                </Route>\n                <Route path=\"/twelve\">\n                  <TwelveHourTimeDisplay date={ this.state.date }></TwelveHourTimeDisplay>\n                </Route>\n                <Route path={[\"/decimal\", \"/\"]}>\n                  <DecimalTimeDisplay date={ this.state.date }></DecimalTimeDisplay>\n                </Route>\n              </Switch>\n\n              <DateDisplay date={ this.state.date }></DateDisplay>\n          </div>\n        );\n    }\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Menu as MenuIcon } from '@material-ui/icons';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { IconButton, Menu } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nexport default function SimpleMenu() {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <IconButton onClick={handleClick} color=\"inherit\">\n        <MenuIcon></MenuIcon>\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleClose}>\n          <Link to=\"/twentyfour\">24 Hour</Link>\n        </MenuItem>\n        <MenuItem onClick={handleClose}>\n          <Link to=\"/twelve\">12 Hour</Link>\n        </MenuItem>\n        <MenuItem onClick={handleClose}>\n          <Link to=\"/decimal\">Decimal</Link>\n        </MenuItem>\n        <MenuItem onClick={handleClose}>\n          <Link to=\"/fractional\">Fractional</Link>\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport ClocksDisplay from './ClocksDisplay';\nimport SimpleMenu from './SimpleMenu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar)}>\n        <Toolbar className={classes.toolbar}>\n          <SimpleMenu />\n        </Toolbar>\n      </AppBar>\n      \n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <ClocksDisplay></ClocksDisplay>\n              {/* <Paper className={classes.paper}>\n                <span>Orders</span>\n              </Paper> */}\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Dashboard from './Dashboard';\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Dashboard></Dashboard>\n            </BrowserRouter>\n        );\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}